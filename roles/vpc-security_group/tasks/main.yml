- name: Create {{ sg_name }} {{ app_evironment }}
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    state: present
    name: "{{ sg_name }}"
    description: "{{ sg_name }}"
    tags:
      Name: "{{ sg_name  }}"
    rules:
    - proto: tcp
      ports: "{{ [22] }}"
      cidr_ip: "{{ port22_cidr_block }}"
      rule_desc: ssh traffic
  register: security_group_results
  when: only_ssh

- name: set avarible {{ sg_name }}_id
  set_fact:
    "{{ sg_name }}_id": "{{ security_group_results.group_id }}"
  when: security_group_results.changed

- name: Save avarible sg_local_id
  lineinfile: >-
    dest="vars/var.yml"
    state=present
    regexp="{{ sg_name }}_id"
    line="{{ sg_name }}_id: {{ security_group_results.group_id }}"
  when: security_group_results.changed

- name: Create {{ sg_name }} {{ app_evironment }}
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    state: present
    name: "{{ sg_name }}"
    description: "{{ sg_name }}"
    tags:
      Name: "{{ sg_name  }}"
    rules:
    - proto: tcp
      ports: "{{ [22] }}"
      cidr_ip: "{{ port22_cidr_block }}"
    - proto: tcp
      ports: 80
      cidr_ip: 0.0.0.0/0
  register: security_group_private
  when: accept_http

- name: set avarible {{ sg_name }}_id
  set_fact:
    "{{ sg_name }}_id": "{{ security_group_private.group_id }}"
    state: present
  when: accept_http

- name: Save avarible {{ sg_name }}_id
  lineinfile: >-
    dest="vars/var.yml"
    state=present
    regexp="{{ sg_name }}_id"
    line="{{ sg_name }}_id: {{ security_group_private.group_id }}"
  when: accept_http
