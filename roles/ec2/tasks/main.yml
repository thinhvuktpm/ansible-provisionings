- name: Get instance server
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    instance_ids: "{{ ec2_ids }}"
  register: ec2_result
  when: ec2_ids is defined

- name: set check instance server
  set_fact:
    check_names: "{{ check_names + [item.tags.Name] }}"
  when: item.state.name=='running'
  with_items: "{{ ec2_result.instances | default(arr)}}"
  vars:
    check_names: []
    arr: [
      {
        tags:
          {
            Name: ''
          },
        state: {
          name: 'abc'
        }
      }
    ]

- name:  "Provisioning ec2 instance {{ app_evironment }}"
  ec2_instance:
    image_id: "{{ image_id }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    key_name: "{{ keypair_name }}"
    wait: true
    count: 1
    state: present
    vpc_subnet_id: "{{ subnet_ids[idx] if subnet_ids[idx] is defined else subnet_ids[0] }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: 30
          delete_on_termination: true
    network:
      assign_public_ip: false
    security_group: "{{ sg_id }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ item }}"
  register: ec2_instances
  when: check_names is undefined or check_names is not contains(item)
  loop: "{{ OS_Names }}"
  loop_control:
    index_var: idx

- name: set avarible ec2_ids
  set_fact:
    ec2_update_ids: "{{ ec2_update_ids + [item.instance_ids[0]] }}"
    ec2_update_ips: "{{ ec2_update_ips + [item.instances[0].network_interfaces[0].private_ip_address] }}"
  when: item is changed
  with_items: "{{ ec2_instances.results }}"
  vars:
    ec2_update_ids: "{{ ec2_ids | default([]) }}"
    ec2_update_ips: "{{ ec2_private_ips | default([]) }}"

- name: Save avarible ec2_ids
  lineinfile: >-
    dest="vars/var.yml"
    state=present
    regexp="{{ item.name }}"
    line="{{ item.name }}: {{ item.value }}"
  loop:
    - { name: ec2_ids, value: "{{ ec2_update_ids }}" }
    - { name: ec2_private_ips, value: "{{ ec2_update_ips }}" }
  when: ec2_instances.changed

- name: pause for 30 seconds
  pause:
    seconds: 30
